axis.ticks.x = element_blank()),
Varves+ theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
PC+ theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
GDD_plot+ theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
TJul+ theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
Sejrup_PC, ncol=1, align = 'hv',
rel_heights = c(0.5,1,1,1,1,1),
labels = c('A.','B.','C.','D.','E.','F.'))
ggsave(filename = file.path(figdir, "Figure_5.pdf"), plot = Figure_5,
width = 190,
height = 280,
units = "mm")
#print(Figure_5)
#| code-fold: true
#| code-summary: "Show code"
#| fig-height: 20
XRF_plot <- XRFannual %>% dplyr::filter(`Age (calBP)` >3999 & `Age (calBP)`<8001)
smot <- 50
min_time2 <- 4500
max_time2  <- 7500
#add boxes around observed events and phases discussed in the manuscript
add_events <- function(box_col, box_col1) {
list(
geom_rect(aes(xmax = 5000, xmin = 7000,ymin = -Inf, ymax = Inf),
fill = box_col1,
alpha = 0.2,
inherit.aes = FALSE),
geom_rect(aes(xmax = 6910,xmin = 6790, ymin = -Inf, ymax = Inf),
fill = box_col,
alpha = 0.2,
inherit.aes = FALSE),
geom_rect(aes(xmax = 6660, xmin = 6560, ymin = -Inf, ymax = Inf),
fill = box_col,
alpha = 0.2,
inherit.aes = FALSE),
geom_rect(aes(xmax = 6405,xmin = 6290, ymin = -Inf,ymax = Inf),
fill = box_col,
alpha = 0.2,
inherit.aes = FALSE),
geom_rect(aes(xmax = 6250, xmin = 6080, ymin = -Inf, ymax = Inf),
fill = box_col,
alpha = 0.2,
inherit.aes = FALSE),
geom_rect(aes(xmax = 5980, xmin = 5950, ymin = -Inf, ymax = Inf),
fill = box_col,
alpha = 0.2,
inherit.aes = FALSE),
geom_rect(aes(xmax = 5850, xmin = 5810, ymin = -Inf, ymax = Inf),
fill = box_col,
alpha = 0.2,
inherit.aes = FALSE),
geom_rect(aes(xmax = 5430, xmin = 5380, ymin = -Inf, ymax = Inf),
fill = box_col,
alpha = 0.2,
inherit.aes = FALSE),
geom_rect(aes(xmax = 5350, xmin = 5280, ymin = -Inf, ymax = Inf),
fill = box_col,
alpha = 0.2,
inherit.aes = FALSE),
geom_rect(aes(xmax = 5230, xmin = 5100, ymin = -Inf, ymax = Inf),
fill = box_col,
alpha = 0.2,
inherit.aes = FALSE)
)
}
#define the box colour for these events/ phases
box_col1 <- 'grey90'
box_col <- 'grey60'
#NAU-23 XRF PC-2
p <-ggplot(XRF_plot, aes(x= `Age (calBP)`, y = PC2)) +
add_events(box_col, box_col1)+
geom_rug(data = XRF, aes(x= `Age (calBP)`, color = cluster),
linewidth = 5,
sides = 't',
show.legend = FALSE)+
scale_color_manual(values = clust_col)+
geom_path(aes(y = rollmean(PC2,1, na.pad = TRUE)),
color = PCA_col[2],
alpha = 0.5,
linetype = 'solid',
size = 0.2) +
geom_path(aes(y = rollmean(PC2, smot, na.pad = TRUE)),
color = 'purple4',
linetype = 'solid',
size = 0.5) +
geom_hline(yintercept = mean(XRF_plot$PC2))+
scale_x_reverse(limits = c(max_time2,min_time2),
breaks = seq(max_time2,min_time2,-100),
expand = c(0,0)) +
theme(legend.position = 'none') +
ggpubr::theme_pubr()
# Calculate the mean GDD between 5000 and 7000 BP
GDD_MH <- GDD %>%
dplyr::filter(`Age (BP)` >= 5000 & `Age (BP)` <= 7000) %>%
summarize(mean_GDD = mean(GDD, na.rm = TRUE)) %>%
pull(mean_GDD)
# Adjust the GDD values to represent anomalies wrt the mid Holocene mean
GDD <- GDD %>%
mutate(GDD_anomaly = GDD - GDD_MH)
#Plot the GDD anomaly
GDD_anom<-ggplot(GDD, aes(x = `Age (BP)`, y = GDD_anomaly)) +
add_events(box_col, box_col1)+
geom_path() +
geom_hline(yintercept = 0,
linetype = "dashed") +
geom_area(aes(y = ifelse(GDD_anomaly > 0, GDD_anomaly, 0)),
fill = "red",
alpha = 0.3) +
geom_area(aes(y = ifelse(GDD_anomaly < 0, GDD_anomaly, 0)),
fill = "blue",
alpha = 0.3) +
scale_x_reverse(limits = c(7500, 4500),
breaks = seq(0, 10000, 500),
expand = c(0, 0)) +
ggpubr::theme_pubr() +
theme(legend.position = 'none') +
labs(x = "Age (BP)", y = "Adjusted GDD")
#Plot model-derived Boreal temps from van Dijk et al. (2024)
Tas <- ggplot(Van_Dijk_Boreal, aes(x=`Age_BP`, y=Annual)) +
add_events(box_col, box_col1)+
geom_hline(yintercept = 0)+
ggpubr::theme_pubr()+
geom_path(color = 'red',)+
geom_path(aes(y = rollmean(Annual, 50, na.pad = TRUE)),
color = 'red4',
linetype = 'solid',
size = 0.5) +
scale_x_reverse(limits = c(7500,4500),
breaks = seq(7500,4500,-100),
expand = c(0,0))+
labs(x = "Age (calBP)",
y = expression("T (\u00B0C)"))
#Plot TSI
TSI <- ggplot(Steinhilber, aes(x=`Age`, y=dTSI)) +
add_events(box_col, box_col1)+
geom_hline(yintercept = 0)+
ggpubr::theme_pubr()+
geom_path(color = 'red')+
ggpubr::theme_pubr()+
scale_x_reverse(limits = c(7500,4500),
breaks = seq(7500,4500,-100),
expand = c(0,0))+
labs(
x = "Age (calBP)",
y = expression(Delta * "TSI")
)
#Plot dendro-derived isotopic reconstructions from Helama et al. (2021)
H <-ggplot(Helama, aes(x=Age, y = oktas_r)) +
add_events(box_col, box_col1)+
geom_path()+
scale_x_reverse(limits = c(7500,4500),
breaks = seq(7500,4000,-100),
expand = c(0,0)) +
xlab('Age (varve yr BP)')+
ggpubr::theme_pubr()
#Plot N. Atlantic SSTs from MD99-2275 (Sicre et al., 2021)
M99 <-ggplot(Sicre_MD99_2275, aes(x=yearBP, y = SST)) +
add_events(box_col, box_col1)+
geom_path(color = 'green2')+
geom_path(aes(y = rollmean(SST, 5, na.pad = TRUE)),
color= 'green4',
linetype = 'solid',
size = 0.5) +
scale_x_reverse(limits = c(7500,4500),
breaks = seq(7500,4000,-100),
expand = c(0,0)) +
xlab('Age (varve yr BP)') +
scale_y_continuous(limits = c(6.5, 12.5))+
ggpubr::theme_pubr()+
labs(
x = "Age (calBP)",
y = expression("SST (\u00B0C)")
)
#Plot N. Atlantic IRD stack from Bond et al. (2001).
IRD <- ggplot(Bond_IRD, aes(x=age, y = stacked)) +
add_events(box_col, box_col1)+
geom_path()+
ggpubr::theme_pubr()+
scale_x_reverse(limits = c(7500,4500),
breaks = seq(7500,4000,-100),
expand = c(0,0)) + xlab('Age (varve yr BP)')
Figure_6 <-cowplot::plot_grid(p + theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
GDD_anom+ theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
TSI+ theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
Tas +theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
H+ theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
M99+ theme(axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()),
IRD,align = 'hv', ncol = 1)
ggsave(filename = file.path(figdir, "Figure_6.pdf"),
plot = Figure_6,
width = 231.353,
height = 323.545,
units = "mm")
#print(Figure_6)
#| code-fold: true
#| code-summary: "Show code"
#| fig-height: 20
#| fig-width: 20
#| echo: false
#subset selected elements
elements <- c('Si','S','K','Ca','Ti','Mn','Fe', 'PC1', 'PC2')
#plot correlation matrix
Corr <-as.matrix(cor(XRF[c(paste0(elements))]))
#####plot correlation matrix of different phases
####filter for EH
XRF_EH <- XRF %>% filter(`Age (calBP)` > 7000 & `Age (calBP)` <= 9900)
Corr_EH <-as.matrix(cor(XRF_EH[c(paste0(elements))]))
####filter for HTM
XRF_HTM <- XRF %>% filter(`Age (calBP)` >= 5000 & `Age (calBP)` <= 7000)
Corr_HTM <-as.matrix(cor(XRF_HTM[c(paste0(elements))]))
####filter for LH
XRF_LH <- XRF %>% filter(`Age (calBP)` >= 50 & `Age (calBP)` <= 5000)
Corr_LH <-as.matrix(cor(XRF_LH[c(paste0(elements))]))
#plot data in from different sections
par(mfrow=c(2,2),
mar = c(2,2,6,2),
oma = c(0,0,6,0),
xpd =NA)
corrplot::corrplot(Corr,
method = 'circle',
type = 'lower',
insig='blank',
digits = 2,
addCoef.col ='black',
cex.main = 2,
number.cex = 1.5,
tl.cex = 1.5,
cl.cex = 1.5,
order = 'original',
title='All varve data (<9.8ka)',
diag=FALSE)
corrplot::corrplot(Corr_EH,
method = 'circle',
type = 'lower',
insig='blank',
digits = 2,
addCoef.col ='black',
cex.main = 2,
number.cex = 1.5,
tl.cex = 1.5,
cl.cex = 1.5,
order = 'original',
title = 'Early Holocene (9.8-7ka)',
diag=FALSE)
corrplot::corrplot(Corr_HTM,
method = 'circle',
type = 'lower',
insig='blank',
digits = 2,
addCoef.col ='black',
cex.main = 2,
number.cex = 1.5,
tl.cex = 1.5,
cl.cex = 1.5,
order = 'original',
title = 'HTM (7-5ka)',
diag=FALSE)
corrplot::corrplot(Corr_LH,
method = 'circle',
type = 'lower',
insig='blank',
digits = 2,
addCoef.col ='black',
cex.main = 2,
number.cex = 1.5,
tl.cex = 1.5,
cl.cex = 1.5,
order = 'original',
title = 'Late Holocene (5-0ka)',
diag=FALSE)
#| code-fold: true
#| code-summary: "Show code"
#| fig-height: 4
#| fig-width: 4
#| echo: false
#Run NBClust: Takes a long time to run. So avoid running if possible
#tictoc::tic("Ward's D all")
#Wards_D_Nbclust<-NbClust::NbClust(data = clust_XRF, diss = NULL,
#distance = 'euclidean', index = 'all',min.nc = 4, max.nc = 10,
#method = c('ward.D'))
#tictoc::toc()
load(paste0(RDATdir, 'Wards_D_NbClust.RData'))
#Write the best number of cluster from each indices into a data frame
nbclust_best<- data.frame(Wards_Nbclust_scale$Best.nc)
#Write a function to list and plot the NbClust results
my_nbclust <- function(nbclust_result,
print.summary = TRUE,
barfill = "steelblue",
barcolor = "steelblue"){
# Remove columns where Number_clusters < 4 and NAs
best_nc <- as.data.frame(t(nbclust_best),
stringsAsFactors = TRUE)
best_nc <- best_nc %>%
filter(Number_clusters >= 4 | is.na(Number_clusters))
best_nc <- na.omit(best_nc)
proposed_clusters <- best_nc$Number_clusters
best_nc$Number_clusters <- as.factor(best_nc$Number_clusters)
print(best_nc)
all_clusters <- as.factor(4:10)
ss <- table(factor(best_nc$Number_clusters, levels = all_clusters))
cat("Among all indices: \n===================\n")
for (i in 1:length(ss)) {
cat("*", ss[i], "proposed ", names(ss)[i], "as the best number of clusters\n")
}
cat("\nConclusion\n=========================\n")
cat("* According to the majority rule, the best number of clusters is ",
names(which.max(ss)), ".\n\n")
df <- data.frame(Number_clusters = names(ss), freq = ss,
stringsAsFactors = TRUE)
df$Number_clusters <- factor(df$Number_clusters, levels = c(4, 5, 6, 7, 8, 9, 10))
df <- df[c(1,3)]
colnames(df) <- c('Number_clusters', 'freq')
p <- ggpubr::ggbarplot(df, x = "Number_clusters", y = "freq",
fill = "steelblue", color = "black") +
coord_cartesian( ylim=c(0,15), expand = FALSE ) +
ggplot2::labs(x = "Number of clusters k",
y = "Frequency among all indices",
title = paste0("Optimal number of clusters - k = ",
names(which.max(ss))))
p
}
#run function
my_nbclust(nbclust_best)
#| code-fold: true
#| code-summary: "Show code"
#| fig-height: 20
#| fig-width: 20
#| echo: false
c1 <- scaled_data %>% filter(cluster ==1)
c1.pca <- princomp(c1[c('Si','S','K','Ca','Ti','Mn','Fe')])
c1p<-factoextra::fviz_pca_var(c1.pca,
title = 'Cluster 1',
axes = c(1,2),
label = 'var',
labelsize = 10,
repel = T,
col.var =  clust_col[1],
theme = ggpubr::theme_pubr()) +
theme(text = element_text(size = 18),
axis.title = element_text(size = 22),
legend.position = "right") +
scale_y_continuous(limits = c(-0.25,0.25))+
scale_x_continuous(limits = c(-0.38,0.25))
c2 <- scaled_data %>% filter(cluster ==2)
c2.pca <- princomp(c2[c('Si','S','K','Ca','Ti','Mn','Fe')])
c2p<- factoextra::fviz_pca_var(c2.pca,
title = 'Cluster 2',
axes = c(1,2),
label = 'var',
labelsize = 10,
repel=T,
col.var = clust_col[2],
theme = ggpubr::theme_pubr()) +
theme(text = element_text(size = 18),
axis.title = element_text(size = 22),
legend.position = "right") +
scale_y_continuous(limits = c(-0.25,0.25))+
scale_x_continuous(limits = c(-0.25,0.25))
c3 <- scaled_data %>% filter(cluster ==3)
c3.pca <- princomp(c3[c('Si','S','K','Ca','Ti','Mn','Fe')])
c3p<-factoextra::fviz_pca_var(c3.pca,
title = 'Cluster 3',
axes = c(1,2),
label = 'var',
# Customizations
labelsize = 10,
col.var = clust_col[3],
theme = ggpubr::theme_pubr()) +
theme(text = element_text(size = 18),
axis.title = element_text(size = 22),
legend.position = "right") +
scale_y_continuous(limits = c(-0.25,0.25))+
scale_x_continuous(limits = c(-0.25,0.25))
c4 <- scaled_data %>% filter(cluster ==4)
c4.pca <- princomp(c4[c('Si','S','K','Ca','Ti','Mn','Fe')])
c4p<-factoextra::fviz_pca_var(c4.pca,
title = 'Cluster 4',
axes = c(1,2),
label = 'var',
# Customizations
labelsize = 10,
col.var = clust_col[4],
theme = ggpubr::theme_pubr()) +
theme(text = element_text(size = 18),
axis.title = element_text(size = 22),
legend.position = "right") +
scale_y_continuous(limits = c(-0.2,0.2))+
scale_x_continuous(limits = c(-0.25,0.25))
PCA_grid <- cowplot::plot_grid(c1p, c2p, c3p, c4p, nrow = 2)
print(PCA_grid)
#| code-fold: true
#| code-summary: "Show code"
#| echo: false
x = get_eigenvalue(data.pca)
x=t(x)
rownames(x)=c("Eigen Value","Variance %", "Cumulative Variance %")
colnames(x)=paste("PC",1:ncol(x),sep = "")
x=round(x,2)
y=eigen(cor(scaled_data[c(1:7)]))$vectors
colnames(y)=paste("PC",1:ncol(x),sep = "")
rownames(y)=colnames(scaled_data[c(1:7)])
x=rbind(x,y)
x=as.data.frame(x)
x=round(x,2)
grp=c(rep("Eigenvalues and Variance %",3),rep("Eigenvectors",nrow(y)))
x_out=cbind(grp,x)
x=cbind(x,grp)
x=x%>%gt(groupname_col = "grp", rownames_to_stub = TRUE)%>%
tab_header(
title = md("**Table S1: Eigenvalues and Eigenvectors from the PCA analyses run on the NAU-23 sequence**"),)%>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width= px(3)
)%>%opt_stylize(style = 6, color = "blue")%>%
tab_options(table.width = pct(80))
x
#| code-fold: true
#| code-summary: "Show code"
#| echo: false
res.pca <- get_pca_var(PCA(scaled_data[c(1:7)], scale.unit = F, graph = F))
res.pca<-lapply(res.pca, as.data.frame)
res.pca=lapply(res.pca, function(x){colnames(x)=c(paste("PC",1:ncol(x),sep = ""));x})
res.pca<-lapply(res.pca, round,2)
cor_pca<-res.pca$cor
contrib_pca<-res.pca$contrib
x <- contrib_pca %>%
gt(groupname_col = "grp", rownames_to_stub = TRUE) %>%
tab_header(
title = md("**Table S2: Contributions(%) of the Variables to the Principal Components**"),
) %>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width = px(3)
) %>%
opt_stylize(style = 6, color = "red") %>%
tab_options(table.width = pct(80))
x
#| code-fold: true
#| code-summary: "Show code"
#| echo: false
y <- cor_pca %>%
gt(rownames_to_stub = TRUE) %>%
tab_header(
title = md("**Table S3: Correlation between PCs and Variables**"),
) %>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width = px(3)
) %>%
opt_stylize(style = 6, color = "red") %>%
tab_options(table.width = pct(80))
y
#Load in XRF, VT, variance and max_depth objects
load(file = paste0(RDATdir,'XRF_Varve_data.RData', sep = ''))
rm(list = ls(all.names=T))
#Load in XRF, VT, variance and max_depth objects
load(file = paste0(RDATdir,'XRF_Varve_data.RData', sep = ''))
# Set the file directory for the RData files
RDATdir <- '/Users/paullincoln/Dropbox/2024/Papers/RData_files/'
#Set a figure directory to save output plots
figdir <- '/Users/paullincoln/Dropbox/2024/Papers/R_Figures'
#Load in XRF, VT, variance and max_depth objects
load(file = paste0(RDATdir,'XRF_Varve_data.RData', sep = ''))
chron<-read_excel('/Users/paullincoln/Dropbox/2023/PhD papers/Nautajarvi XRF/NAU23 chronology/NAU23 chronology for canonical varves 9.5.24.xlsx', sheet = 'Interpolation')
ggplot(chron, aes(x=`Age`, y=depth)) + geom_path()
ggplot(chron, aes(x=`Age`, y=depth)) + geom_path() scale_y_reverse()
ggplot(chron, aes(x=`Age`, y=depth)) + geom_path() +scale_y_reverse()
ggplot(chron, aes(x=`Age`, y=depth)) + geom_path() +scale_y_reverse() + ggpubr::theme_pubr()
ggplot(chron, aes(x=`Age`, y=depth)) + geom_path() +scale_y_reverse() + scale_x_continuous(breaks = seq(-100,10000,500))+ ggpubr::theme_pubr()
ggplot(chron, aes(x=`Age`, y=depth)) + geom_path() +scale_y_reverse() + scale_x_continuous(breaks = seq(0,10000,500))+ ggpubr::theme_pubr()
ggplot(chron, aes(x=`Age`, y=depth)) + geom_path() +scale_y_reverse() + scale_x_continuous(breaks = seq(0,10000,1000))+ ggpubr::theme_pubr()
ggplot(chron, aes(x=`Age`, y=depth)) + geom_path() +scale_y_reverse(limits = c(0, 7300), expand = c(0,0)) + scale_x_continuous(breaks = seq(0,10000,1000))+ ggpubr::theme_pubr()
ggplot(chron, aes(x=`Age`, y=depth)) + geom_path() +scale_y_reverse(limits = c(7300,0), expand = c(0,0)) + scale_x_continuous(breaks = seq(0,10000,1000))+ ggpubr::theme_pubr()
